
soti-stm32project-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f74  08004f74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f7c  08004f7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025b04  2000000c  08004f90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025b10  08004f90  00025b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e91d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002425  00000000  00000000  0002e99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d2  00000000  00000000  00031958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227ae  00000000  00000000  0003222a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e572  00000000  00000000  000549d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfe94  00000000  00000000  00062f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ec0  00000000  00000000  00132de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00135ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004f14 	.word	0x08004f14

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004f14 	.word	0x08004f14

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <CAN_Init>:
/**
 * @brief Boots the CAN Bus
 * 
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef CAN_Init(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef operation_status;

	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterIdHigh = 0x0000;
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterIdLow = 0x0000;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterBank = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80004f2:	2301      	movs	r3, #1
 80004f4:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80004f6:	2301      	movs	r3, #1
 80004f8:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.SlaveStartFilterBank = 14;
 80004fa:	230e      	movs	r3, #14
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28

	operation_status = HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	4619      	mov	r1, r3
 8000502:	4812      	ldr	r0, [pc, #72]	; (800054c <CAN_Init+0x7c>)
 8000504:	f000 fec5 	bl	8001292 <HAL_CAN_ConfigFilter>
 8000508:	4603      	mov	r3, r0
 800050a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (operation_status != HAL_OK) goto error;
 800050e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000512:	2b00      	cmp	r3, #0
 8000514:	d111      	bne.n	800053a <CAN_Init+0x6a>
	operation_status = HAL_CAN_Start(&hcan1); // Turn on the CAN Bus
 8000516:	480d      	ldr	r0, [pc, #52]	; (800054c <CAN_Init+0x7c>)
 8000518:	f000 ff85 	bl	8001426 <HAL_CAN_Start>
 800051c:	4603      	mov	r3, r0
 800051e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (operation_status != HAL_OK) goto error;
 8000522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000526:	2b00      	cmp	r3, #0
 8000528:	d109      	bne.n	800053e <CAN_Init+0x6e>

	operation_status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800052a:	2102      	movs	r1, #2
 800052c:	4807      	ldr	r0, [pc, #28]	; (800054c <CAN_Init+0x7c>)
 800052e:	f001 f9b0 	bl	8001892 <HAL_CAN_ActivateNotification>
 8000532:	4603      	mov	r3, r0
 8000534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000538:	e002      	b.n	8000540 <CAN_Init+0x70>
	if (operation_status != HAL_OK) goto error;
 800053a:	bf00      	nop
 800053c:	e000      	b.n	8000540 <CAN_Init+0x70>
	if (operation_status != HAL_OK) goto error;
 800053e:	bf00      	nop

error:
    return operation_status;
 8000540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000544:	4618      	mov	r0, r3
 8000546:	3730      	adds	r7, #48	; 0x30
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000028 	.word	0x20000028

08000550 <CAN_Transmit_Message>:
 *
 * @param myMessage: The CAN message
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Transmit_Message(CANMessage_t myMessage){
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	; 0x38
 8000554:	af00      	add	r7, sp, #0
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint32_t txMailbox; // Transmit Mailbox
	CAN_TxHeaderTypeDef txMessage;
	
	// TX Message Parameters
	uint16_t ID = (myMessage.priority << 4) | (SOURCE_ID << 2) | (myMessage.DestinationID);
 800055c:	793b      	ldrb	r3, [r7, #4]
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	b21b      	sxth	r3, r3
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	b21a      	sxth	r2, r3
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	b21b      	sxth	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b21b      	sxth	r3, r3
 8000570:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint8_t message[8] = {myMessage.command, myMessage.data[0], myMessage.data[1], myMessage.data[2], myMessage.data[3], myMessage.data[4], myMessage.data[5],myMessage.data[6]};
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	743b      	strb	r3, [r7, #16]
 8000576:	7a3b      	ldrb	r3, [r7, #8]
 8000578:	747b      	strb	r3, [r7, #17]
 800057a:	7a7b      	ldrb	r3, [r7, #9]
 800057c:	74bb      	strb	r3, [r7, #18]
 800057e:	7abb      	ldrb	r3, [r7, #10]
 8000580:	74fb      	strb	r3, [r7, #19]
 8000582:	7afb      	ldrb	r3, [r7, #11]
 8000584:	753b      	strb	r3, [r7, #20]
 8000586:	7b3b      	ldrb	r3, [r7, #12]
 8000588:	757b      	strb	r3, [r7, #21]
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	75bb      	strb	r3, [r7, #22]
 800058e:	7bbb      	ldrb	r3, [r7, #14]
 8000590:	75fb      	strb	r3, [r7, #23]

	txMessage.StdId = ID;
 8000592:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000594:	61bb      	str	r3, [r7, #24]
	txMessage.IDE = CAN_ID_STD;
 8000596:	2300      	movs	r3, #0
 8000598:	623b      	str	r3, [r7, #32]
	txMessage.RTR = CAN_RTR_DATA;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
	txMessage.DLC = MAX_CAN_DATA_LENGTH;
 800059e:	2308      	movs	r3, #8
 80005a0:	62bb      	str	r3, [r7, #40]	; 0x28

	return HAL_CAN_AddTxMessage(&hcan1, &txMessage, message, &txMailbox);
 80005a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a6:	f107 0210 	add.w	r2, r7, #16
 80005aa:	f107 0118 	add.w	r1, r7, #24
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <CAN_Transmit_Message+0x70>)
 80005b0:	f000 ff7d 	bl	80014ae <HAL_CAN_AddTxMessage>
 80005b4:	4603      	mov	r3, r0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3738      	adds	r7, #56	; 0x38
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028

080005c4 <CAN_Message_Received>:
/**
 * @brief Interrupt Handler for received CAN messages
 *
 * @return HAL_StatusTypeDef
 */
HAL_StatusTypeDef CAN_Message_Received() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef rxMessage; // Received Message Header
	uint8_t rxData[8]; // Received data
	uint8_t receivedDestinationId; // Destination ID of Received Message

	/* Get RX message */
	operation_status = HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &rxMessage, rxData);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	f107 0218 	add.w	r2, r7, #24
 80005d2:	2100      	movs	r1, #0
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <CAN_Message_Received+0x9c>)
 80005d6:	f001 f83a 	bl	800164e <HAL_CAN_GetRxMessage>
 80005da:	4603      	mov	r3, r0
 80005dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (operation_status != HAL_OK) goto error;
 80005e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d133      	bne.n	8000650 <CAN_Message_Received+0x8c>
	receivedDestinationId = RECEIVED_DESTINATION_ID_MASK & rxMessage.StdId;
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	f003 0303 	and.w	r3, r3, #3
 80005f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	CANMessage_t can_message = {
        .priority = rxMessage.StdId >> 4,
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	091b      	lsrs	r3, r3, #4
	CANMessage_t can_message = {
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	713b      	strb	r3, [r7, #4]
        .SenderID = (RECEIVED_SENDER_ID_MASK & rxMessage.StdId) >> 2,
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	089b      	lsrs	r3, r3, #2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	b2db      	uxtb	r3, r3
	CANMessage_t can_message = {
 8000608:	717b      	strb	r3, [r7, #5]
 800060a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800060e:	71bb      	strb	r3, [r7, #6]
        .DestinationID = receivedDestinationId,
        .command = rxData[0],
 8000610:	7c3b      	ldrb	r3, [r7, #16]
	CANMessage_t can_message = {
 8000612:	71fb      	strb	r3, [r7, #7]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000614:	7c7b      	ldrb	r3, [r7, #17]
	CANMessage_t can_message = {
 8000616:	723b      	strb	r3, [r7, #8]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000618:	7cbb      	ldrb	r3, [r7, #18]
	CANMessage_t can_message = {
 800061a:	727b      	strb	r3, [r7, #9]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 800061c:	7cfb      	ldrb	r3, [r7, #19]
	CANMessage_t can_message = {
 800061e:	72bb      	strb	r3, [r7, #10]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000620:	7d3b      	ldrb	r3, [r7, #20]
	CANMessage_t can_message = {
 8000622:	72fb      	strb	r3, [r7, #11]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000624:	7d7b      	ldrb	r3, [r7, #21]
	CANMessage_t can_message = {
 8000626:	733b      	strb	r3, [r7, #12]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 8000628:	7dbb      	ldrb	r3, [r7, #22]
	CANMessage_t can_message = {
 800062a:	737b      	strb	r3, [r7, #13]
        .data = {rxData[1], rxData[2], rxData[3], rxData[4], rxData[5], rxData[6], rxData[7]}
 800062c:	7dfb      	ldrb	r3, [r7, #23]
	CANMessage_t can_message = {
 800062e:	73bb      	strb	r3, [r7, #14]
    };
	
    bool success = CAN_Queue_Enqueue(&satelliteToGroundQueue, &can_message);
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <CAN_Message_Received+0xa0>)
 8000636:	f000 f85b 	bl	80006f0 <CAN_Queue_Enqueue>
 800063a:	4603      	mov	r3, r0
 800063c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	if(success) return HAL_OK;
 8000640:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <CAN_Message_Received+0x88>
 8000648:	2300      	movs	r3, #0
 800064a:	e004      	b.n	8000656 <CAN_Message_Received+0x92>
	else return HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	e002      	b.n	8000656 <CAN_Message_Received+0x92>
	if (operation_status != HAL_OK) goto error;
 8000650:	bf00      	nop

error:
	return operation_status;
 8000652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000656:	4618      	mov	r0, r3
 8000658:	3738      	adds	r7, #56	; 0x38
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000028 	.word	0x20000028
 8000664:	20000160 	.word	0x20000160

08000668 <CAN_Queue_Init>:
#include "can_message_queue.h"

//###############################################################################################
//Public Functions
//###############################################################################################
void CAN_Queue_Init(CANQueue_t* queue) {
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    queue->head = 0;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
    queue->tail = 0;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
}
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <CAN_Queue_IsEmpty>:

bool CAN_Queue_IsEmpty(const CANQueue_t* queue) {
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    return (queue->head == queue->tail);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	bf0c      	ite	eq
 800069c:	2301      	moveq	r3, #1
 800069e:	2300      	movne	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
	...

080006b0 <CAN_Queue_IsFull>:

bool CAN_Queue_IsFull(const CANQueue_t* queue) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    return ((queue->tail + 1) % CAN_QUEUE_SIZE == queue->head);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	685b      	ldr	r3, [r3, #4]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <CAN_Queue_IsFull+0x3c>)
 80006c0:	fba3 1302 	umull	r1, r3, r3, r2
 80006c4:	0b1b      	lsrs	r3, r3, #12
 80006c6:	f641 3158 	movw	r1, #7000	; 0x1b58
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	4293      	cmp	r3, r2
 80006d6:	bf0c      	ite	eq
 80006d8:	2301      	moveq	r3, #1
 80006da:	2300      	movne	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	95cbec1b 	.word	0x95cbec1b

080006f0 <CAN_Queue_Enqueue>:

bool CAN_Queue_Enqueue(CANQueue_t* queue, CANMessage_t* message) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
    if (CAN_Queue_IsFull(queue)) {
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ffd8 	bl	80006b0 <CAN_Queue_IsFull>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <CAN_Queue_Enqueue+0x1a>
        return false;
 8000706:	2300      	movs	r3, #0
 8000708:	e01f      	b.n	800074a <CAN_Queue_Enqueue+0x5a>
    }

    CANQueueItem_t* item = &queue->items[queue->tail];
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	3308      	adds	r3, #8
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
    memcpy(&item->data, message, sizeof(CANMessage_t));
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	220b      	movs	r2, #11
 8000724:	6839      	ldr	r1, [r7, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f004 fbe6 	bl	8004ef8 <memcpy>
    queue->tail = (queue->tail + 1) % CAN_QUEUE_SIZE;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	1c5a      	adds	r2, r3, #1
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <CAN_Queue_Enqueue+0x64>)
 8000734:	fba3 1302 	umull	r1, r3, r3, r2
 8000738:	0b1b      	lsrs	r3, r3, #12
 800073a:	f641 3158 	movw	r1, #7000	; 0x1b58
 800073e:	fb01 f303 	mul.w	r3, r1, r3
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	6053      	str	r3, [r2, #4]

    return true;
 8000748:	2301      	movs	r3, #1
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	95cbec1b 	.word	0x95cbec1b

08000758 <CAN_Queue_Dequeue>:

bool CAN_Queue_Dequeue(CANQueue_t* queue, CANMessage_t* messageBuffer) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
    if (CAN_Queue_IsEmpty(queue)) {
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ff90 	bl	8000688 <CAN_Queue_IsEmpty>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <CAN_Queue_Dequeue+0x1a>
        return false;
 800076e:	2300      	movs	r3, #0
 8000770:	e01f      	b.n	80007b2 <CAN_Queue_Dequeue+0x5a>
    }

    CANQueueItem_t* item = &queue->items[queue->head];
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	4413      	add	r3, r2
 8000780:	3308      	adds	r3, #8
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
    memcpy(messageBuffer, &item->data, sizeof(CANMessage_t));
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	220b      	movs	r2, #11
 800078c:	4619      	mov	r1, r3
 800078e:	6838      	ldr	r0, [r7, #0]
 8000790:	f004 fbb2 	bl	8004ef8 <memcpy>
    queue->head = (queue->head + 1) % CAN_QUEUE_SIZE;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <CAN_Queue_Dequeue+0x64>)
 800079c:	fba3 1302 	umull	r1, r3, r3, r2
 80007a0:	0b1b      	lsrs	r3, r3, #12
 80007a2:	f641 3158 	movw	r1, #7000	; 0x1b58
 80007a6:	fb01 f303 	mul.w	r3, r1, r3
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	6013      	str	r3, [r2, #0]

    return true;
 80007b0:	2301      	movs	r3, #1
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	95cbec1b 	.word	0x95cbec1b

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fbed 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f857 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 f93d 	bl	8000a4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f90b 	bl	80009ec <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80007d6:	f000 f8a3 	bl	8000920 <MX_CAN1_Init>
  MX_UART4_Init();
 80007da:	f000 f8d7 	bl	800098c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  CAN_Queue_Init(&satelliteToGroundQueue);
 80007de:	4823      	ldr	r0, [pc, #140]	; (800086c <main+0xac>)
 80007e0:	f7ff ff42 	bl	8000668 <CAN_Queue_Init>
  CAN_Queue_Init(&groundToSatelliteQueue);
 80007e4:	4822      	ldr	r0, [pc, #136]	; (8000870 <main+0xb0>)
 80007e6:	f7ff ff3f 	bl	8000668 <CAN_Queue_Init>
  HAL_UART_Receive_IT(&huart2, canRxData, sizeof(canRxData));
 80007ea:	220b      	movs	r2, #11
 80007ec:	4921      	ldr	r1, [pc, #132]	; (8000874 <main+0xb4>)
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <main+0xb8>)
 80007f0:	f003 f898 	bl	8003924 <HAL_UART_Receive_IT>
  CAN_Init();
 80007f4:	f7ff fe6c 	bl	80004d0 <CAN_Init>
  //Turn off green LED
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2120      	movs	r1, #32
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f001 fda6 	bl	8002350 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (!CAN_Queue_IsEmpty(&satelliteToGroundQueue))
 8000804:	4819      	ldr	r0, [pc, #100]	; (800086c <main+0xac>)
 8000806:	f7ff ff3f 	bl	8000688 <CAN_Queue_IsEmpty>
 800080a:	4603      	mov	r3, r0
 800080c:	f083 0301 	eor.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d015      	beq.n	8000842 <main+0x82>
    {
      CANMessage_t receivedData;
      uint8_t serializedData[11];

      //getting message from the queue.
      CAN_Queue_Dequeue(&satelliteToGroundQueue, &receivedData);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <main+0xac>)
 800081e:	f7ff ff9b 	bl	8000758 <CAN_Queue_Dequeue>
      //serializing the CanMessage_t to transfer over UART.
      serializeCANMessage(&receivedData, serializedData);
 8000822:	f107 0210 	add.w	r2, r7, #16
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f9a9 	bl	8000b84 <serializeCANMessage>
      //transferring data over UART.
      HAL_UART_Transmit(&huart2, serializedData, sizeof(serializedData), HAL_MAX_DELAY);
 8000832:	f107 0110 	add.w	r1, r7, #16
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	220b      	movs	r2, #11
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <main+0xb8>)
 800083e:	f002 ffe7 	bl	8003810 <HAL_UART_Transmit>
    }

    if (!CAN_Queue_IsEmpty(&groundToSatelliteQueue))
 8000842:	480b      	ldr	r0, [pc, #44]	; (8000870 <main+0xb0>)
 8000844:	f7ff ff20 	bl	8000688 <CAN_Queue_IsEmpty>
 8000848:	4603      	mov	r3, r0
 800084a:	f083 0301 	eor.w	r3, r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0d7      	beq.n	8000804 <main+0x44>
    {
      CANMessage_t receivedData;

      //getting message from the queue.
      CAN_Queue_Dequeue(&groundToSatelliteQueue, &receivedData);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <main+0xb0>)
 800085a:	f7ff ff7d 	bl	8000758 <CAN_Queue_Dequeue>
      //transfering data over UART.
      CAN_Transmit_Message(receivedData);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000864:	f7ff fe74 	bl	8000550 <CAN_Transmit_Message>
    if (!CAN_Queue_IsEmpty(&satelliteToGroundQueue))
 8000868:	e7cc      	b.n	8000804 <main+0x44>
 800086a:	bf00      	nop
 800086c:	20000160 	.word	0x20000160
 8000870:	20012e30 	.word	0x20012e30
 8000874:	20025b00 	.word	0x20025b00
 8000878:	200000d8 	.word	0x200000d8

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b096      	sub	sp, #88	; 0x58
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	2244      	movs	r2, #68	; 0x44
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fb08 	bl	8004ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800089e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a2:	f001 fd7b 	bl	800239c <HAL_PWREx_ControlVoltageScaling>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008ac:	f000 f9d1 	bl	8000c52 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c6:	2301      	movs	r3, #1
 80008c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ca:	230a      	movs	r3, #10
 80008cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ce:	2307      	movs	r3, #7
 80008d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4618      	mov	r0, r3
 80008e0:	f001 fdb2 	bl	8002448 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ea:	f000 f9b2 	bl	8000c52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2104      	movs	r1, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f002 f9b2 	bl	8002c70 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000912:	f000 f99e 	bl	8000c52 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3758      	adds	r7, #88	; 0x58
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_CAN1_Init+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <MX_CAN1_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_CAN1_Init+0x64>)
 800092c:	2210      	movs	r2, #16
 800092e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_CAN1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_CAN1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_CAN1_Init+0x64>)
 800093e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000942:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_CAN1_Init+0x64>)
 8000946:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800094a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800094c:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <MX_CAN1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_CAN1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_CAN1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_CAN1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_CAN1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_CAN1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_CAN1_Init+0x64>)
 8000972:	f000 fb93 	bl	800109c <HAL_CAN_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800097c:	f000 f969 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000028 	.word	0x20000028
 8000988:	40006400 	.word	0x40006400

0800098c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_UART4_Init+0x58>)
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_UART4_Init+0x5c>)
 8000994:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_UART4_Init+0x58>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_UART4_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_UART4_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_UART4_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_UART4_Init+0x58>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_UART4_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_UART4_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_UART4_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_UART4_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_UART4_Init+0x58>)
 80009d0:	f002 fed0 	bl	8003774 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 f93a 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000050 	.word	0x20000050
 80009e8:	40004c00 	.word	0x40004c00

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART2_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a30:	f002 fea0 	bl	8003774 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f90a 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200000d8 	.word	0x200000d8
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a2a      	ldr	r2, [pc, #168]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b28      	ldr	r3, [pc, #160]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0304 	and.w	r3, r3, #4
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a1e      	ldr	r2, [pc, #120]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_GPIO_Init+0xc4>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aca:	f001 fc41 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <MX_GPIO_Init+0xc8>)
 8000ae6:	f001 fab9 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000aea:	2320      	movs	r3, #32
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b04:	f001 faaa 	bl	800205c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000800 	.word	0x48000800

08000b18 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef operation_status;
  operation_status = CAN_Message_Received();
 8000b20:	f7ff fd50 	bl	80005c4 <CAN_Message_Received>
 8000b24:	4603      	mov	r3, r0
 8000b26:	73fb      	strb	r3, [r7, #15]
  if (operation_status != HAL_OK)
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    //Turn on green LED
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2120      	movs	r1, #32
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f001 fc0b 	bl	8002350 <HAL_GPIO_WritePin>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  CANMessage_t message;

  deserializeCANMessage(&message, canRxData);
 8000b4c:	f107 030c 	add.w	r3, r7, #12
 8000b50:	4909      	ldr	r1, [pc, #36]	; (8000b78 <HAL_UART_RxCpltCallback+0x34>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f849 	bl	8000bea <deserializeCANMessage>

  CAN_Queue_Enqueue(&groundToSatelliteQueue, &message);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_UART_RxCpltCallback+0x38>)
 8000b60:	f7ff fdc6 	bl	80006f0 <CAN_Queue_Enqueue>

  HAL_UART_Receive_IT(&huart2, canRxData, sizeof(canRxData));
 8000b64:	220b      	movs	r2, #11
 8000b66:	4904      	ldr	r1, [pc, #16]	; (8000b78 <HAL_UART_RxCpltCallback+0x34>)
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_UART_RxCpltCallback+0x3c>)
 8000b6a:	f002 fedb 	bl	8003924 <HAL_UART_Receive_IT>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20025b00 	.word	0x20025b00
 8000b7c:	20012e30 	.word	0x20012e30
 8000b80:	200000d8 	.word	0x200000d8

08000b84 <serializeCANMessage>:

void serializeCANMessage(CANMessage_t* message, uint8_t* serializedData)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  serializedData[0] = message->priority;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	701a      	strb	r2, [r3, #0]
  serializedData[1] = message->SenderID;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	7852      	ldrb	r2, [r2, #1]
 8000b9e:	701a      	strb	r2, [r3, #0]
  serializedData[2] = message->DestinationID;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	7892      	ldrb	r2, [r2, #2]
 8000ba8:	701a      	strb	r2, [r3, #0]
  serializedData[3] = message->command;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	3303      	adds	r3, #3
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	78d2      	ldrb	r2, [r2, #3]
 8000bb2:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < 7; i++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	e00d      	b.n	8000bd6 <serializeCANMessage+0x52>
  {
    serializedData[4 + i] = message->data[i];
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	440a      	add	r2, r1
 8000bca:	3204      	adds	r2, #4
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 7; i++)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2b06      	cmp	r3, #6
 8000bda:	ddee      	ble.n	8000bba <serializeCANMessage+0x36>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <deserializeCANMessage>:

void deserializeCANMessage(CANMessage_t* messageBuffer, const uint8_t* deserializedData)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
  messageBuffer->priority = deserializedData[0];
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	701a      	strb	r2, [r3, #0]
  messageBuffer->SenderID = deserializedData[1];
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	781a      	ldrb	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	705a      	strb	r2, [r3, #1]
  messageBuffer->DestinationID = deserializedData[2];
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3302      	adds	r3, #2
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	709a      	strb	r2, [r3, #2]
  messageBuffer->command = deserializedData[3];
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	3303      	adds	r3, #3
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	70da      	strb	r2, [r3, #3]

  for (int i = 0; i < 7; i++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e00e      	b.n	8000c3e <deserializeCANMessage+0x54>
  {
    messageBuffer->data[i] = deserializedData[4 + i];
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3304      	adds	r3, #4
 8000c24:	461a      	mov	r2, r3
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	4413      	add	r3, r2
 8000c2a:	7819      	ldrb	r1, [r3, #0]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4413      	add	r3, r2
 8000c32:	3304      	adds	r3, #4
 8000c34:	460a      	mov	r2, r1
 8000c36:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 7; i++)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	dded      	ble.n	8000c20 <deserializeCANMessage+0x36>
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c56:	b672      	cpsid	i
}
 8000c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <HAL_CAN_MspInit+0x8c>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d130      	bne.n	8000d28 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_CAN_MspInit+0x90>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <HAL_CAN_MspInit+0x90>)
 8000ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_CAN_MspInit+0x90>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_CAN_MspInit+0x90>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_CAN_MspInit+0x90>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_CAN_MspInit+0x90>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000cf6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4809      	ldr	r0, [pc, #36]	; (8000d38 <HAL_CAN_MspInit+0x94>)
 8000d14:	f001 f9a2 	bl	800205c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2014      	movs	r0, #20
 8000d1e:	f001 f8e8 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d22:	2014      	movs	r0, #20
 8000d24:	f001 f901 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40006400 	.word	0x40006400
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a6      	sub	sp, #152	; 0x98
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	2268      	movs	r2, #104	; 0x68
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 f89f 	bl	8004ea0 <memset>
  if(huart->Instance==UART4)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_UART_MspInit+0x154>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d144      	bne.n	8000df6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f002 f99d 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff ff65 	bl	8000c52 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d88:	4b42      	ldr	r3, [pc, #264]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8c:	4a41      	ldr	r2, [pc, #260]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000d8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d92:	6593      	str	r3, [r2, #88]	; 0x58
 8000d94:	4b3f      	ldr	r3, [pc, #252]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b3c      	ldr	r3, [pc, #240]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	4a3b      	ldr	r2, [pc, #236]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dac:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000db8:	2303      	movs	r3, #3
 8000dba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f001 f93c 	bl	800205c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	2034      	movs	r0, #52	; 0x34
 8000dea:	f001 f882 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000dee:	2034      	movs	r0, #52	; 0x34
 8000df0:	f001 f89b 	bl	8001f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df4:	e048      	b.n	8000e88 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <HAL_UART_MspInit+0x15c>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d143      	bne.n	8000e88 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 f953 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000e18:	f7ff ff1b 	bl	8000c52 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e26:	6593      	str	r3, [r2, #88]	; 0x58
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_UART_MspInit+0x158>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4c:	230c      	movs	r3, #12
 8000e4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e64:	2307      	movs	r3, #7
 8000e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f001 f8f2 	bl	800205c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2026      	movs	r0, #38	; 0x26
 8000e7e:	f001 f838 	bl	8001ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e82:	2026      	movs	r0, #38	; 0x26
 8000e84:	f001 f851 	bl	8001f2a <HAL_NVIC_EnableIRQ>
}
 8000e88:	bf00      	nop
 8000e8a:	3798      	adds	r7, #152	; 0x98
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40004c00 	.word	0x40004c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40004400 	.word	0x40004400

08000e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <NMI_Handler+0x4>

08000ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <MemManage_Handler+0x4>

08000eae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <BusFault_Handler+0x4>

08000eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <UsageFault_Handler+0x4>

08000eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee8:	f000 f8b8 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <CAN1_RX0_IRQHandler+0x10>)
 8000ef6:	f000 fcf2 	bl	80018de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000028 	.word	0x20000028

08000f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <USART2_IRQHandler+0x10>)
 8000f0a:	f002 fd57 	bl	80039bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200000d8 	.word	0x200000d8

08000f18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <UART4_IRQHandler+0x10>)
 8000f1e:	f002 fd4d 	bl	80039bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000050 	.word	0x20000050

08000f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <SystemInit+0x20>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <SystemInit+0x20>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f54:	f7ff ffea 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f5a:	490d      	ldr	r1, [pc, #52]	; (8000f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <LoopForever+0xe>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f60:	e002      	b.n	8000f68 <LoopCopyDataInit>

08000f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f66:	3304      	adds	r3, #4

08000f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f6c:	d3f9      	bcc.n	8000f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f70:	4c0a      	ldr	r4, [pc, #40]	; (8000f9c <LoopForever+0x16>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f74:	e001      	b.n	8000f7a <LoopFillZerobss>

08000f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f78:	3204      	adds	r2, #4

08000f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f7c:	d3fb      	bcc.n	8000f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f003 ff97 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f82:	f7ff fc1d 	bl	80007c0 <main>

08000f86 <LoopForever>:

LoopForever:
    b LoopForever
 8000f86:	e7fe      	b.n	8000f86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f88:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	08004f84 	.word	0x08004f84
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	20025b10 	.word	0x20025b10

08000fa0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC1_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_Init+0x3c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <HAL_Init+0x3c>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 ff8e 	bl	8001edc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f80f 	bl	8000fe4 <HAL_InitTick>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	e001      	b.n	8000fd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fd2:	f7ff fe43 	bl	8000c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40022000 	.word	0x40022000

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff0:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_InitTick+0x6c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d023      	beq.n	8001040 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff8:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_InitTick+0x70>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_InitTick+0x6c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 ff99 	bl	8001f46 <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d809      	bhi.n	8001034 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 ff63 	bl	8001ef2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <HAL_InitTick+0x74>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e007      	b.n	8001044 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e004      	b.n	8001044 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e001      	b.n	8001044 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	20000000 	.word	0x20000000
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008
 8001080:	20025b0c 	.word	0x20025b0c

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20025b0c 	.word	0x20025b0c

0800109c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0ed      	b.n	800128a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fdf2 	bl	8000ca4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0201 	orr.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d0:	f7ff ffd8 	bl	8001084 <HAL_GetTick>
 80010d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d6:	e012      	b.n	80010fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010d8:	f7ff ffd4 	bl	8001084 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b0a      	cmp	r3, #10
 80010e4:	d90b      	bls.n	80010fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e0c5      	b.n	800128a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0e5      	beq.n	80010d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0202 	bic.w	r2, r2, #2
 800111a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800111c:	f7ff ffb2 	bl	8001084 <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001122:	e012      	b.n	800114a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001124:	f7ff ffae 	bl	8001084 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b0a      	cmp	r3, #10
 8001130:	d90b      	bls.n	800114a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2205      	movs	r2, #5
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e09f      	b.n	800128a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e5      	bne.n	8001124 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7e1b      	ldrb	r3, [r3, #24]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d108      	bne.n	8001172 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e007      	b.n	8001182 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7e5b      	ldrb	r3, [r3, #25]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d108      	bne.n	800119c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e007      	b.n	80011ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7e9b      	ldrb	r3, [r3, #26]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0220 	orr.w	r2, r2, #32
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e007      	b.n	80011d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0220 	bic.w	r2, r2, #32
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	7edb      	ldrb	r3, [r3, #27]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0210 	bic.w	r2, r2, #16
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e007      	b.n	8001200 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f042 0210 	orr.w	r2, r2, #16
 80011fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7f1b      	ldrb	r3, [r3, #28]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d108      	bne.n	800121a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0208 	orr.w	r2, r2, #8
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e007      	b.n	800122a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0208 	bic.w	r2, r2, #8
 8001228:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7f5b      	ldrb	r3, [r3, #29]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d108      	bne.n	8001244 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0204 	orr.w	r2, r2, #4
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	e007      	b.n	8001254 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0204 	bic.w	r2, r2, #4
 8001252:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	ea42 0103 	orr.w	r1, r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	1e5a      	subs	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001292:	b480      	push	{r7}
 8001294:	b087      	sub	sp, #28
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012aa:	7cfb      	ldrb	r3, [r7, #19]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d003      	beq.n	80012b8 <HAL_CAN_ConfigFilter+0x26>
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f040 80aa 	bne.w	800140c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	2201      	movs	r2, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d123      	bne.n	800133a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	401a      	ands	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001314:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3248      	adds	r2, #72	; 0x48
 800131a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001330:	6979      	ldr	r1, [r7, #20]
 8001332:	3348      	adds	r3, #72	; 0x48
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d122      	bne.n	8001388 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	431a      	orrs	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001362:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3248      	adds	r2, #72	; 0x48
 8001368:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800137c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800137e:	6979      	ldr	r1, [r7, #20]
 8001380:	3348      	adds	r3, #72	; 0x48
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d109      	bne.n	80013d0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80013ce:	e007      	b.n	80013e0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	431a      	orrs	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d107      	bne.n	80013f8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013fe:	f023 0201 	bic.w	r2, r3, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	e006      	b.n	800141a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d12e      	bne.n	8001498 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2202      	movs	r2, #2
 800143e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0201 	bic.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001452:	f7ff fe17 	bl	8001084 <HAL_GetTick>
 8001456:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001458:	e012      	b.n	8001480 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800145a:	f7ff fe13 	bl	8001084 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b0a      	cmp	r3, #10
 8001466:	d90b      	bls.n	8001480 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2205      	movs	r2, #5
 8001478:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e012      	b.n	80014a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e5      	bne.n	800145a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e006      	b.n	80014a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
  }
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b089      	sub	sp, #36	; 0x24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d003      	beq.n	80014da <HAL_CAN_AddTxMessage+0x2c>
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	f040 80ad 	bne.w	8001634 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10a      	bne.n	80014fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8095 	beq.w	8001624 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	0e1b      	lsrs	r3, r3, #24
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001504:	2201      	movs	r2, #1
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	409a      	lsls	r2, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001520:	68f9      	ldr	r1, [r7, #12]
 8001522:	6809      	ldr	r1, [r1, #0]
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	3318      	adds	r3, #24
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	440b      	add	r3, r1
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	e00f      	b.n	8001552 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800153c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001546:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3318      	adds	r3, #24
 800154c:	011b      	lsls	r3, r3, #4
 800154e:	440b      	add	r3, r1
 8001550:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3318      	adds	r3, #24
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	440b      	add	r3, r1
 8001562:	3304      	adds	r3, #4
 8001564:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	7d1b      	ldrb	r3, [r3, #20]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d111      	bne.n	8001592 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3318      	adds	r3, #24
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4413      	add	r3, r2
 800157a:	3304      	adds	r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	6811      	ldr	r1, [r2, #0]
 8001582:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3318      	adds	r3, #24
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	3304      	adds	r3, #4
 8001590:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3307      	adds	r3, #7
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	061a      	lsls	r2, r3, #24
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3306      	adds	r3, #6
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3305      	adds	r3, #5
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	4313      	orrs	r3, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	3204      	adds	r2, #4
 80015b2:	7812      	ldrb	r2, [r2, #0]
 80015b4:	4610      	mov	r0, r2
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	ea43 0200 	orr.w	r2, r3, r0
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	440b      	add	r3, r1
 80015c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80015c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3303      	adds	r3, #3
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	061a      	lsls	r2, r3, #24
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3302      	adds	r3, #2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	041b      	lsls	r3, r3, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3301      	adds	r3, #1
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	4610      	mov	r0, r2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6811      	ldr	r1, [r2, #0]
 80015f0:	ea43 0200 	orr.w	r2, r3, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	440b      	add	r3, r1
 80015fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80015fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3318      	adds	r3, #24
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	4413      	add	r3, r2
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	6811      	ldr	r1, [r2, #0]
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3318      	adds	r3, #24
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	440b      	add	r3, r1
 800161e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	e00e      	b.n	8001642 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e006      	b.n	8001642 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
  }
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800164e:	b480      	push	{r7}
 8001650:	b087      	sub	sp, #28
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001662:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d003      	beq.n	8001672 <HAL_CAN_GetRxMessage+0x24>
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b02      	cmp	r3, #2
 800166e:	f040 8103 	bne.w	8001878 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10e      	bne.n	8001696 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0f7      	b.n	8001886 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0e8      	b.n	8001886 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	331b      	adds	r3, #27
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	4413      	add	r3, r2
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0204 	and.w	r2, r3, #4
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10c      	bne.n	80016ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	331b      	adds	r3, #27
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	4413      	add	r3, r2
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0d5b      	lsrs	r3, r3, #21
 80016e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e00b      	b.n	8001704 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	331b      	adds	r3, #27
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	08db      	lsrs	r3, r3, #3
 80016fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	331b      	adds	r3, #27
 800170c:	011b      	lsls	r3, r3, #4
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0202 	and.w	r2, r3, #2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	331b      	adds	r3, #27
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2208      	movs	r2, #8
 8001736:	611a      	str	r2, [r3, #16]
 8001738:	e00b      	b.n	8001752 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	331b      	adds	r3, #27
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	3304      	adds	r3, #4
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 020f 	and.w	r2, r3, #15
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	331b      	adds	r3, #27
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	4413      	add	r3, r2
 800175e:	3304      	adds	r3, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b2da      	uxtb	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	331b      	adds	r3, #27
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	3304      	adds	r3, #4
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	b29a      	uxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0a1a      	lsrs	r2, r3, #8
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0c1a      	lsrs	r2, r3, #16
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3302      	adds	r3, #2
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	4413      	add	r3, r2
 80017d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0e1a      	lsrs	r2, r3, #24
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	3303      	adds	r3, #3
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3304      	adds	r3, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0a1a      	lsrs	r2, r3, #8
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	3305      	adds	r3, #5
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	4413      	add	r3, r2
 8001822:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0c1a      	lsrs	r2, r3, #16
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3306      	adds	r3, #6
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	4413      	add	r3, r2
 800183c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0e1a      	lsrs	r2, r3, #24
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3307      	adds	r3, #7
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0220 	orr.w	r2, r2, #32
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	e007      	b.n	8001874 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691a      	ldr	r2, [r3, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0220 	orr.w	r2, r2, #32
 8001872:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e006      	b.n	8001886 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
  }
}
 8001886:	4618      	mov	r0, r3
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001892:	b480      	push	{r7}
 8001894:	b085      	sub	sp, #20
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d002      	beq.n	80018b0 <HAL_CAN_ActivateNotification+0x1e>
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d109      	bne.n	80018c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6959      	ldr	r1, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e006      	b.n	80018d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b08a      	sub	sp, #40	; 0x28
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d07c      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d023      	beq.n	8001976 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f983 	bl	8001c4c <HAL_CAN_TxMailbox0CompleteCallback>
 8001946:	e016      	b.n	8001976 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
 800195a:	e00c      	b.n	8001976 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d004      	beq.n	8001970 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	e002      	b.n	8001976 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f989 	bl	8001c88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d024      	beq.n	80019ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001988:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f963 	bl	8001c60 <HAL_CAN_TxMailbox1CompleteCallback>
 800199a:	e016      	b.n	80019ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d004      	beq.n	80019b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e00c      	b.n	80019ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d004      	beq.n	80019c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
 80019c2:	e002      	b.n	80019ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f969 	bl	8001c9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d024      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f943 	bl	8001c74 <HAL_CAN_TxMailbox2CompleteCallback>
 80019ee:	e016      	b.n	8001a1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	e00c      	b.n	8001a1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
 8001a16:	e002      	b.n	8001a1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f949 	bl	8001cb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00c      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2210      	movs	r2, #16
 8001a40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00b      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f930 	bl	8001cc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff f84b 	bl	8000b18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2210      	movs	r2, #16
 8001aa4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00b      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d006      	beq.n	8001ac8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2208      	movs	r2, #8
 8001ac0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f912 	bl	8001cec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f8f9 	bl	8001cd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2210      	movs	r2, #16
 8001b00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8fc 	bl	8001d00 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2208      	movs	r2, #8
 8001b22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f8f5 	bl	8001d14 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d07b      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d072      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	f043 0304 	orr.w	r3, r3, #4
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b92:	6a3b      	ldr	r3, [r7, #32]
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d043      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03e      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bac:	2b60      	cmp	r3, #96	; 0x60
 8001bae:	d02b      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x32a>
 8001bb0:	2b60      	cmp	r3, #96	; 0x60
 8001bb2:	d82e      	bhi.n	8001c12 <HAL_CAN_IRQHandler+0x334>
 8001bb4:	2b50      	cmp	r3, #80	; 0x50
 8001bb6:	d022      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x320>
 8001bb8:	2b50      	cmp	r3, #80	; 0x50
 8001bba:	d82a      	bhi.n	8001c12 <HAL_CAN_IRQHandler+0x334>
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d019      	beq.n	8001bf4 <HAL_CAN_IRQHandler+0x316>
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d826      	bhi.n	8001c12 <HAL_CAN_IRQHandler+0x334>
 8001bc4:	2b30      	cmp	r3, #48	; 0x30
 8001bc6:	d010      	beq.n	8001bea <HAL_CAN_IRQHandler+0x30c>
 8001bc8:	2b30      	cmp	r3, #48	; 0x30
 8001bca:	d822      	bhi.n	8001c12 <HAL_CAN_IRQHandler+0x334>
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d002      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x2f8>
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d005      	beq.n	8001be0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001bd4:	e01d      	b.n	8001c12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bde:	e019      	b.n	8001c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	f043 0310 	orr.w	r3, r3, #16
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be8:	e014      	b.n	8001c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bf2:	e00f      	b.n	8001c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bfc:	e00a      	b.n	8001c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c06:	e005      	b.n	8001c14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c10:	e000      	b.n	8001c14 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001c22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2204      	movs	r2, #4
 8001c2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f872 	bl	8001d28 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	db0b      	blt.n	8001dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <__NVIC_EnableIRQ+0x38>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000e100 	.word	0xe000e100

08001ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	; (8001e28 <__NVIC_SetPriority+0x4c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e04:	e00a      	b.n	8001e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	4908      	ldr	r1, [pc, #32]	; (8001e2c <__NVIC_SetPriority+0x50>)
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	f003 030f 	and.w	r3, r3, #15
 8001e12:	3b04      	subs	r3, #4
 8001e14:	0112      	lsls	r2, r2, #4
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	761a      	strb	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f1c3 0307 	rsb	r3, r3, #7
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	bf28      	it	cs
 8001e4e:	2304      	movcs	r3, #4
 8001e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3304      	adds	r3, #4
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d902      	bls.n	8001e60 <NVIC_EncodePriority+0x30>
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3b03      	subs	r3, #3
 8001e5e:	e000      	b.n	8001e62 <NVIC_EncodePriority+0x32>
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e78:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	43d9      	mvns	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e88:	4313      	orrs	r3, r2
         );
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea8:	d301      	bcc.n	8001eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00f      	b.n	8001ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <SysTick_Config+0x40>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb6:	210f      	movs	r1, #15
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f7ff ff8e 	bl	8001ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <SysTick_Config+0x40>)
 8001ec8:	2207      	movs	r2, #7
 8001eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	e000e010 	.word	0xe000e010

08001edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff29 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff3e 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff8e 	bl	8001e30 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5d 	bl	8001ddc <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff31 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa2 	bl	8001e98 <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d008      	beq.n	8001f88 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e022      	b.n	8001fce <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 020e 	bic.w	r2, r2, #14
 8001f96:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f003 021c 	and.w	r2, r3, #28
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d005      	beq.n	8001ffe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	e029      	b.n	8002052 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 020e 	bic.w	r2, r2, #14
 800200c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f003 021c 	and.w	r2, r3, #28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	2101      	movs	r1, #1
 800202c:	fa01 f202 	lsl.w	r2, r1, r2
 8002030:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
    }
  }
  return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e154      	b.n	8002316 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8146 	beq.w	8002310 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d005      	beq.n	800209c <HAL_GPIO_Init+0x40>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d130      	bne.n	80020fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d2:	2201      	movs	r2, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0201 	and.w	r2, r3, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b03      	cmp	r3, #3
 8002108:	d017      	beq.n	800213a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	4013      	ands	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d123      	bne.n	800218e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	6939      	ldr	r1, [r7, #16]
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80a0 	beq.w	8002310 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d0:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_GPIO_Init+0x2d8>)
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	4a57      	ldr	r2, [pc, #348]	; (8002334 <HAL_GPIO_Init+0x2d8>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	6613      	str	r3, [r2, #96]	; 0x60
 80021dc:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_GPIO_Init+0x2d8>)
 80021de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e8:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_GPIO_Init+0x2dc>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	3302      	adds	r3, #2
 80021f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002212:	d019      	beq.n	8002248 <HAL_GPIO_Init+0x1ec>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a49      	ldr	r2, [pc, #292]	; (800233c <HAL_GPIO_Init+0x2e0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <HAL_GPIO_Init+0x1e8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a48      	ldr	r2, [pc, #288]	; (8002340 <HAL_GPIO_Init+0x2e4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00d      	beq.n	8002240 <HAL_GPIO_Init+0x1e4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_GPIO_Init+0x2e8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <HAL_GPIO_Init+0x1e0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a46      	ldr	r2, [pc, #280]	; (8002348 <HAL_GPIO_Init+0x2ec>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_GPIO_Init+0x1dc>
 8002234:	2304      	movs	r3, #4
 8002236:	e008      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002238:	2307      	movs	r3, #7
 800223a:	e006      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 800223c:	2303      	movs	r3, #3
 800223e:	e004      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002240:	2302      	movs	r3, #2
 8002242:	e002      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_GPIO_Init+0x1ee>
 8002248:	2300      	movs	r3, #0
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	f002 0203 	and.w	r2, r2, #3
 8002250:	0092      	lsls	r2, r2, #2
 8002252:	4093      	lsls	r3, r2
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800225a:	4937      	ldr	r1, [pc, #220]	; (8002338 <HAL_GPIO_Init+0x2dc>)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002268:	4b38      	ldr	r3, [pc, #224]	; (800234c <HAL_GPIO_Init+0x2f0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <HAL_GPIO_Init+0x2f0>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002292:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_GPIO_Init+0x2f0>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022b6:	4a25      	ldr	r2, [pc, #148]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022e6:	4b19      	ldr	r3, [pc, #100]	; (800234c <HAL_GPIO_Init+0x2f0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <HAL_GPIO_Init+0x2f0>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	f47f aea3 	bne.w	800206c <HAL_GPIO_Init+0x10>
  }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000
 8002338:	40010000 	.word	0x40010000
 800233c:	48000400 	.word	0x48000400
 8002340:	48000800 	.word	0x48000800
 8002344:	48000c00 	.word	0x48000c00
 8002348:	48001000 	.word	0x48001000
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_PWREx_GetVoltageRange+0x18>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40007000 	.word	0x40007000

0800239c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023aa:	d130      	bne.n	800240e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b8:	d038      	beq.n	800242c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023c2:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2232      	movs	r2, #50	; 0x32
 80023d0:	fb02 f303 	mul.w	r3, r2, r3
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	0c9b      	lsrs	r3, r3, #18
 80023dc:	3301      	adds	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e0:	e002      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f4:	d102      	bne.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f2      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002408:	d110      	bne.n	800242c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e00f      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d007      	beq.n	800242c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002424:	4a05      	ldr	r2, [pc, #20]	; (800243c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800242a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40007000 	.word	0x40007000
 8002440:	20000000 	.word	0x20000000
 8002444:	431bde83 	.word	0x431bde83

08002448 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f000 bc02 	b.w	8002c60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245c:	4b96      	ldr	r3, [pc, #600]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030c 	and.w	r3, r3, #12
 8002464:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002466:	4b94      	ldr	r3, [pc, #592]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80e4 	beq.w	8002646 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_RCC_OscConfig+0x4c>
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	f040 808b 	bne.w	80025a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b01      	cmp	r3, #1
 8002490:	f040 8087 	bne.w	80025a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002494:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_OscConfig+0x64>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e3d9      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1a      	ldr	r2, [r3, #32]
 80024b0:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <HAL_RCC_OscConfig+0x7e>
 80024bc:	4b7e      	ldr	r3, [pc, #504]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c4:	e005      	b.n	80024d2 <HAL_RCC_OscConfig+0x8a>
 80024c6:	4b7c      	ldr	r3, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80024c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d223      	bcs.n	800251e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 fd8c 	bl	8002ff8 <RCC_SetFlashLatencyFromMSIRange>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e3ba      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024ea:	4b73      	ldr	r3, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a72      	ldr	r2, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b70      	ldr	r3, [pc, #448]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	496d      	ldr	r1, [pc, #436]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4b6b      	ldr	r3, [pc, #428]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	021b      	lsls	r3, r3, #8
 8002516:	4968      	ldr	r1, [pc, #416]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e025      	b.n	800256a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251e:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a65      	ldr	r2, [pc, #404]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4960      	ldr	r1, [pc, #384]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800253c:	4b5e      	ldr	r3, [pc, #376]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	495b      	ldr	r1, [pc, #364]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fd4c 	bl	8002ff8 <RCC_SetFlashLatencyFromMSIRange>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e37a      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800256a:	f000 fc81 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 800256e:	4602      	mov	r2, r0
 8002570:	4b51      	ldr	r3, [pc, #324]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4950      	ldr	r1, [pc, #320]	; (80026bc <HAL_RCC_OscConfig+0x274>)
 800257c:	5ccb      	ldrb	r3, [r1, r3]
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	fa22 f303 	lsr.w	r3, r2, r3
 8002586:	4a4e      	ldr	r2, [pc, #312]	; (80026c0 <HAL_RCC_OscConfig+0x278>)
 8002588:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800258a:	4b4e      	ldr	r3, [pc, #312]	; (80026c4 <HAL_RCC_OscConfig+0x27c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd28 	bl	8000fe4 <HAL_InitTick>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d052      	beq.n	8002644 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	e35e      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d032      	beq.n	8002610 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025aa:	4b43      	ldr	r3, [pc, #268]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a42      	ldr	r2, [pc, #264]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b6:	f7fe fd65 	bl	8001084 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025be:	f7fe fd61 	bl	8001084 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e347      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a35      	ldr	r2, [pc, #212]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	4930      	ldr	r1, [pc, #192]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025fa:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	492b      	ldr	r1, [pc, #172]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
 800260e:	e01a      	b.n	8002646 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002610:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800261c:	f7fe fd32 	bl	8001084 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002624:	f7fe fd2e 	bl	8001084 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e314      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002636:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1dc>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d073      	beq.n	800273a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x21c>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d10e      	bne.n	800267c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d063      	beq.n	8002738 <HAL_RCC_OscConfig+0x2f0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d15f      	bne.n	8002738 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e2f1      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x24c>
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e025      	b.n	80026e0 <HAL_RCC_OscConfig+0x298>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269c:	d114      	bne.n	80026c8 <HAL_RCC_OscConfig+0x280>
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <HAL_RCC_OscConfig+0x270>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e013      	b.n	80026e0 <HAL_RCC_OscConfig+0x298>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08004f2c 	.word	0x08004f2c
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004
 80026c8:	4ba0      	ldr	r3, [pc, #640]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a9f      	ldr	r2, [pc, #636]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80026ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b9d      	ldr	r3, [pc, #628]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a9c      	ldr	r2, [pc, #624]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80026da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d013      	beq.n	8002710 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7fe fccc 	bl	8001084 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe fcc8 	bl	8001084 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b64      	cmp	r3, #100	; 0x64
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e2ae      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002702:	4b92      	ldr	r3, [pc, #584]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2a8>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fcb8 	bl	8001084 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fcb4 	bl	8001084 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e29a      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800272a:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCC_OscConfig+0x504>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x2d0>
 8002736:	e000      	b.n	800273a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d060      	beq.n	8002808 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x310>
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d119      	bne.n	8002786 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d116      	bne.n	8002786 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002758:	4b7c      	ldr	r3, [pc, #496]	; (800294c <HAL_RCC_OscConfig+0x504>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x328>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e277      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	4973      	ldr	r1, [pc, #460]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002784:	e040      	b.n	8002808 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d023      	beq.n	80027d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6e      	ldr	r2, [pc, #440]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fc73 	bl	8001084 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fc6f 	bl	8001084 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e255      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b4:	4b65      	ldr	r3, [pc, #404]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b62      	ldr	r3, [pc, #392]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	495f      	ldr	r1, [pc, #380]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
 80027d4:	e018      	b.n	8002808 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d6:	4b5d      	ldr	r3, [pc, #372]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5c      	ldr	r2, [pc, #368]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80027dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fc4f 	bl	8001084 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe fc4b 	bl	8001084 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e231      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027fc:	4b53      	ldr	r3, [pc, #332]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d03c      	beq.n	800288e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d01c      	beq.n	8002856 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_RCC_OscConfig+0x504>)
 800281e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002822:	4a4a      	ldr	r2, [pc, #296]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7fe fc2a 	bl	8001084 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7fe fc26 	bl	8001084 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e20c      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002846:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ef      	beq.n	8002834 <HAL_RCC_OscConfig+0x3ec>
 8002854:	e01b      	b.n	800288e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800285c:	4a3b      	ldr	r2, [pc, #236]	; (800294c <HAL_RCC_OscConfig+0x504>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fc0d 	bl	8001084 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fc09 	bl	8001084 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1ef      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ef      	bne.n	800286e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80a6 	beq.w	80029e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289c:	2300      	movs	r3, #0
 800289e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	4a26      	ldr	r2, [pc, #152]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80028b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b6:	6593      	str	r3, [r2, #88]	; 0x58
 80028b8:	4b24      	ldr	r3, [pc, #144]	; (800294c <HAL_RCC_OscConfig+0x504>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c4:	2301      	movs	r3, #1
 80028c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x508>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d118      	bne.n	8002906 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_OscConfig+0x508>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x508>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fbd0 	bl	8001084 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe fbcc 	bl	8001084 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1b2      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <HAL_RCC_OscConfig+0x508>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x4d8>
 800290e:	4b0f      	ldr	r3, [pc, #60]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291e:	e029      	b.n	8002974 <HAL_RCC_OscConfig+0x52c>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d115      	bne.n	8002954 <HAL_RCC_OscConfig+0x50c>
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_RCC_OscConfig+0x504>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	4a07      	ldr	r2, [pc, #28]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_RCC_OscConfig+0x504>)
 800293a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293e:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_RCC_OscConfig+0x504>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x52c>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	40007000 	.word	0x40007000
 8002954:	4b9a      	ldr	r3, [pc, #616]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295a:	4a99      	ldr	r2, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002964:	4b96      	ldr	r3, [pc, #600]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296a:	4a95      	ldr	r2, [pc, #596]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d016      	beq.n	80029aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fb82 	bl	8001084 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fb7e 	bl	8001084 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e162      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800299a:	4b89      	ldr	r3, [pc, #548]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ed      	beq.n	8002984 <HAL_RCC_OscConfig+0x53c>
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fb6b 	bl	8001084 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe fb67 	bl	8001084 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e14b      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c8:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1ed      	bne.n	80029b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029dc:	4b78      	ldr	r3, [pc, #480]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e0:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 80029e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d03c      	beq.n	8002a6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029fc:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 80029fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a02:	4a6f      	ldr	r2, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7fe fb3a 	bl	8001084 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a14:	f7fe fb36 	bl	8001084 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e11c      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ef      	beq.n	8002a14 <HAL_RCC_OscConfig+0x5cc>
 8002a34:	e01b      	b.n	8002a6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a36:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a3c:	4a60      	ldr	r2, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fb1d 	bl	8001084 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a4e:	f7fe fb19 	bl	8001084 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0ff      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a60:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1ef      	bne.n	8002a4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 80f3 	beq.w	8002c5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	f040 80c9 	bne.w	8002c14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a82:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f003 0203 	and.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d12c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d123      	bne.n	8002af0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d11b      	bne.n	8002af0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d113      	bne.n	8002af0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	085b      	lsrs	r3, r3, #1
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d109      	bne.n	8002af0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d06b      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d062      	beq.n	8002bbc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0ac      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2d      	ldr	r2, [pc, #180]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b12:	f7fe fab7 	bl	8001084 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fab3 	bl	8001084 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e099      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCC_OscConfig+0x77c>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b48:	3a01      	subs	r2, #1
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	4311      	orrs	r1, r2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b52:	0212      	lsls	r2, r2, #8
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b5a:	0852      	lsrs	r2, r2, #1
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	0552      	lsls	r2, r2, #21
 8002b60:	4311      	orrs	r1, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0652      	lsls	r2, r2, #25
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b72:	06d2      	lsls	r2, r2, #27
 8002b74:	430a      	orrs	r2, r1
 8002b76:	4912      	ldr	r1, [pc, #72]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	4a0c      	ldr	r2, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b94:	f7fe fa76 	bl	8001084 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fa72 	bl	8001084 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e058      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_RCC_OscConfig+0x778>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bba:	e050      	b.n	8002c5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e04f      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d144      	bne.n	8002c5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bec:	f7fe fa4a 	bl	8001084 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fa46 	bl	8001084 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e02c      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x7ac>
 8002c12:	e024      	b.n	8002c5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d01f      	beq.n	8002c5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fa2d 	bl	8001084 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fa29 	bl	8001084 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e00f      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	4905      	ldr	r1, [pc, #20]	; (8002c68 <HAL_RCC_OscConfig+0x820>)
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_OscConfig+0x824>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
 8002c58:	e001      	b.n	8002c5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	feeefffc 	.word	0xfeeefffc

08002c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0e7      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c84:	4b75      	ldr	r3, [pc, #468]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d910      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b72      	ldr	r3, [pc, #456]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 0207 	bic.w	r2, r3, #7
 8002c9a:	4970      	ldr	r1, [pc, #448]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0cf      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d908      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd0:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4960      	ldr	r1, [pc, #384]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d04c      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d121      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e0a6      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d107      	bne.n	8002d1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d0e:	4b54      	ldr	r3, [pc, #336]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d115      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e09a      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d26:	4b4e      	ldr	r3, [pc, #312]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e08e      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e086      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d46:	4b46      	ldr	r3, [pc, #280]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f023 0203 	bic.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	4943      	ldr	r1, [pc, #268]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe f994 	bl	8001084 <HAL_GetTick>
 8002d5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d60:	f7fe f990 	bl	8001084 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e06e      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d76:	4b3a      	ldr	r3, [pc, #232]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 020c 	and.w	r2, r3, #12
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1eb      	bne.n	8002d60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d208      	bcs.n	8002db6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	492b      	ldr	r1, [pc, #172]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d210      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0207 	bic.w	r2, r3, #7
 8002dcc:	4923      	ldr	r1, [pc, #140]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCC_ClockConfig+0x1ec>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e036      	b.n	8002e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4918      	ldr	r1, [pc, #96]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4910      	ldr	r1, [pc, #64]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e24:	f000 f824 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	490b      	ldr	r1, [pc, #44]	; (8002e64 <HAL_RCC_ClockConfig+0x1f4>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e40:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <HAL_RCC_ClockConfig+0x1f8>)
 8002e42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1fc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe f8cb 	bl	8000fe4 <HAL_InitTick>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08004f2c 	.word	0x08004f2c
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	20000004 	.word	0x20000004

08002e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	; 0x24
 8002e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b0c      	cmp	r3, #12
 8002e9c:	d121      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d11e      	bne.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ea4:	4b34      	ldr	r3, [pc, #208]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	091b      	lsrs	r3, r3, #4
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ecc:	4a2b      	ldr	r2, [pc, #172]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10d      	bne.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d102      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	e004      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ef4:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d134      	bne.n	8002f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d003      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0xac>
 8002f14:	e005      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f16:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f18:	617b      	str	r3, [r7, #20]
      break;
 8002f1a:	e005      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f1e:	617b      	str	r3, [r7, #20]
      break;
 8002f20:	e002      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	617b      	str	r3, [r7, #20]
      break;
 8002f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	3301      	adds	r3, #1
 8002f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	0a1b      	lsrs	r3, r3, #8
 8002f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	fb03 f202 	mul.w	r2, r3, r2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f4e:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	0e5b      	lsrs	r3, r3, #25
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f68:	69bb      	ldr	r3, [r7, #24]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08004f44 	.word	0x08004f44
 8002f80:	00f42400 	.word	0x00f42400
 8002f84:	007a1200 	.word	0x007a1200

08002f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000000 	.word	0x20000000

08002fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fa4:	f7ff fff0 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4904      	ldr	r1, [pc, #16]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08004f3c 	.word	0x08004f3c

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fd0:	f7ff ffda 	bl	8002f88 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0adb      	lsrs	r3, r3, #11
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08004f3c 	.word	0x08004f3c

08002ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003004:	4b2a      	ldr	r3, [pc, #168]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003010:	f7ff f9b6 	bl	8002380 <HAL_PWREx_GetVoltageRange>
 8003014:	6178      	str	r0, [r7, #20]
 8003016:	e014      	b.n	8003042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003018:	4b25      	ldr	r3, [pc, #148]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	4a24      	ldr	r2, [pc, #144]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003030:	f7ff f9a6 	bl	8002380 <HAL_PWREx_GetVoltageRange>
 8003034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003048:	d10b      	bne.n	8003062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b80      	cmp	r3, #128	; 0x80
 800304e:	d919      	bls.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2ba0      	cmp	r3, #160	; 0xa0
 8003054:	d902      	bls.n	800305c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003056:	2302      	movs	r3, #2
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e013      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800305c:	2301      	movs	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	e010      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d902      	bls.n	800306e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003068:	2303      	movs	r3, #3
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	e00a      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b80      	cmp	r3, #128	; 0x80
 8003072:	d102      	bne.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003074:	2302      	movs	r3, #2
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e004      	b.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d101      	bne.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f023 0207 	bic.w	r2, r3, #7
 800308c:	4909      	ldr	r1, [pc, #36]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40022000 	.word	0x40022000

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c0:	2300      	movs	r3, #0
 80030c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c4:	2300      	movs	r3, #0
 80030c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d031      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030dc:	d01a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80030de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030e2:	d814      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d009      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ec:	d10f      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80030ee:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4a5c      	ldr	r2, [pc, #368]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fa:	e00c      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fa44 	bl	8003590 <RCCEx_PLLSAI1_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800310c:	e003      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	74fb      	strb	r3, [r7, #19]
      break;
 8003112:	e000      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003116:	7cfb      	ldrb	r3, [r7, #19]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800311c:	4b51      	ldr	r3, [pc, #324]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	494e      	ldr	r1, [pc, #312]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003132:	e001      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003134:	7cfb      	ldrb	r3, [r7, #19]
 8003136:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 809e 	beq.w	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800314a:	4b46      	ldr	r3, [pc, #280]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800314c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800315a:	2300      	movs	r3, #0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b40      	ldr	r3, [pc, #256]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	4a3f      	ldr	r2, [pc, #252]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6593      	str	r3, [r2, #88]	; 0x58
 800316c:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a39      	ldr	r2, [pc, #228]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003188:	f7fd ff7c 	bl	8001084 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800318e:	e009      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003190:	f7fd ff78 	bl	8001084 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	74fb      	strb	r3, [r7, #19]
        break;
 80031a2:	e005      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0ef      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d15a      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031b6:	4b2b      	ldr	r3, [pc, #172]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01e      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d019      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031de:	4b21      	ldr	r3, [pc, #132]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031fe:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7fd ff38 	bl	8001084 <HAL_GetTick>
 8003214:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003216:	e00b      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fd ff34 	bl	8001084 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	; 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d902      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	74fb      	strb	r3, [r7, #19]
            break;
 800322e:	e006      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ec      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003252:	4904      	ldr	r1, [pc, #16]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800325a:	e009      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	74bb      	strb	r3, [r7, #18]
 8003260:	e006      	b.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003270:	7c7b      	ldrb	r3, [r7, #17]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	4b9e      	ldr	r3, [pc, #632]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	4a9d      	ldr	r2, [pc, #628]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003280:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800328e:	4b98      	ldr	r3, [pc, #608]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0203 	bic.w	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	4994      	ldr	r1, [pc, #592]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032b0:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 020c 	bic.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	498c      	ldr	r1, [pc, #560]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032d2:	4b87      	ldr	r3, [pc, #540]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	4983      	ldr	r1, [pc, #524]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032f4:	4b7e      	ldr	r3, [pc, #504]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	497b      	ldr	r1, [pc, #492]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003316:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	4972      	ldr	r1, [pc, #456]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003338:	4b6d      	ldr	r3, [pc, #436]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	496a      	ldr	r1, [pc, #424]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800335a:	4b65      	ldr	r3, [pc, #404]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	4961      	ldr	r1, [pc, #388]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337c:	4b5c      	ldr	r3, [pc, #368]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338a:	4959      	ldr	r1, [pc, #356]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800339e:	4b54      	ldr	r3, [pc, #336]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	4950      	ldr	r1, [pc, #320]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c0:	4b4b      	ldr	r3, [pc, #300]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	4948      	ldr	r1, [pc, #288]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e8:	f023 0203 	bic.w	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	493f      	ldr	r1, [pc, #252]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d028      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003404:	4b3a      	ldr	r3, [pc, #232]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	4937      	ldr	r1, [pc, #220]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003422:	d106      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800342a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342e:	60d3      	str	r3, [r2, #12]
 8003430:	e011      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800343a:	d10c      	bne.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f8a4 	bl	8003590 <RCCEx_PLLSAI1_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d028      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003462:	4b23      	ldr	r3, [pc, #140]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	491f      	ldr	r1, [pc, #124]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003480:	d106      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	4a1a      	ldr	r2, [pc, #104]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003488:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800348c:	60d3      	str	r3, [r2, #12]
 800348e:	e011      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003498:	d10c      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3304      	adds	r3, #4
 800349e:	2101      	movs	r1, #1
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f875 	bl	8003590 <RCCEx_PLLSAI1_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02b      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	4908      	ldr	r1, [pc, #32]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034de:	d109      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a02      	ldr	r2, [pc, #8]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ea:	60d3      	str	r3, [r2, #12]
 80034ec:	e014      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034fc:	d10c      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	2101      	movs	r1, #1
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f843 	bl	8003590 <RCCEx_PLLSAI1_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01c      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003542:	d10c      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	2102      	movs	r1, #2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f820 	bl	8003590 <RCCEx_PLLSAI1_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003554:	7cfb      	ldrb	r3, [r7, #19]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 800355a:	7cfb      	ldrb	r3, [r7, #19]
 800355c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003578:	4904      	ldr	r1, [pc, #16]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003580:	7cbb      	ldrb	r3, [r7, #18]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000

08003590 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800359e:	4b74      	ldr	r3, [pc, #464]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035aa:	4b71      	ldr	r3, [pc, #452]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0203 	and.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d10d      	bne.n	80035d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
       ||
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d009      	beq.n	80035d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035c2:	4b6b      	ldr	r3, [pc, #428]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
       ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d047      	beq.n	8003666 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	73fb      	strb	r3, [r7, #15]
 80035da:	e044      	b.n	8003666 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d018      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x86>
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d825      	bhi.n	8003634 <RCCEx_PLLSAI1_Config+0xa4>
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d002      	beq.n	80035f2 <RCCEx_PLLSAI1_Config+0x62>
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d009      	beq.n	8003604 <RCCEx_PLLSAI1_Config+0x74>
 80035f0:	e020      	b.n	8003634 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f2:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d11d      	bne.n	800363a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003602:	e01a      	b.n	800363a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003604:	4b5a      	ldr	r3, [pc, #360]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360c:	2b00      	cmp	r3, #0
 800360e:	d116      	bne.n	800363e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003614:	e013      	b.n	800363e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003622:	4b53      	ldr	r3, [pc, #332]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003632:	e006      	b.n	8003642 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      break;
 8003638:	e004      	b.n	8003644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363a:	bf00      	nop
 800363c:	e002      	b.n	8003644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003642:	bf00      	nop
    }

    if(status == HAL_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10d      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800364a:	4b49      	ldr	r3, [pc, #292]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	430b      	orrs	r3, r1
 8003660:	4943      	ldr	r1, [pc, #268]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003662:	4313      	orrs	r3, r2
 8003664:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d17c      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800366c:	4b40      	ldr	r3, [pc, #256]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3f      	ldr	r2, [pc, #252]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003678:	f7fd fd04 	bl	8001084 <HAL_GetTick>
 800367c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367e:	e009      	b.n	8003694 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003680:	f7fd fd00 	bl	8001084 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d902      	bls.n	8003694 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	73fb      	strb	r3, [r7, #15]
        break;
 8003692:	e005      	b.n	80036a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ef      	bne.n	8003680 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d15f      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d110      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80036b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6892      	ldr	r2, [r2, #8]
 80036bc:	0211      	lsls	r1, r2, #8
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68d2      	ldr	r2, [r2, #12]
 80036c2:	06d2      	lsls	r2, r2, #27
 80036c4:	430a      	orrs	r2, r1
 80036c6:	492a      	ldr	r1, [pc, #168]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	610b      	str	r3, [r1, #16]
 80036cc:	e027      	b.n	800371e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d112      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6912      	ldr	r2, [r2, #16]
 80036ea:	0852      	lsrs	r2, r2, #1
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0552      	lsls	r2, r2, #21
 80036f0:	430a      	orrs	r2, r1
 80036f2:	491f      	ldr	r1, [pc, #124]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
 80036f8:	e011      	b.n	800371e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	0211      	lsls	r1, r2, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6952      	ldr	r2, [r2, #20]
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0652      	lsls	r2, r2, #25
 8003716:	430a      	orrs	r2, r1
 8003718:	4915      	ldr	r1, [pc, #84]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800371e:	4b14      	ldr	r3, [pc, #80]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003724:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fd fcab 	bl	8001084 <HAL_GetTick>
 800372e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003730:	e009      	b.n	8003746 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003732:	f7fd fca7 	bl	8001084 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d902      	bls.n	8003746 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	73fb      	strb	r3, [r7, #15]
          break;
 8003744:	e005      	b.n	8003752 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003746:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0ef      	beq.n	8003732 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	4903      	ldr	r1, [pc, #12]	; (8003770 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003762:	4313      	orrs	r3, r2
 8003764:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000

08003774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e040      	b.n	8003808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d106      	bne.n	800379c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fd fad0 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fe8e 	bl	80044dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fc05 	bl	8003fd0 <UART_SetConfig>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e01b      	b.n	8003808 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 ff0d 	bl	8004620 <UART_CheckIdleState>
 8003806:	4603      	mov	r3, r0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003824:	2b20      	cmp	r3, #32
 8003826:	d178      	bne.n	800391a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_UART_Transmit+0x24>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e071      	b.n	800391c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2221      	movs	r2, #33	; 0x21
 8003844:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003846:	f7fd fc1d 	bl	8001084 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003864:	d108      	bne.n	8003878 <HAL_UART_Transmit+0x68>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e003      	b.n	8003880 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003880:	e030      	b.n	80038e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	2180      	movs	r1, #128	; 0x80
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 ff6f 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e03c      	b.n	800391c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	881a      	ldrh	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b4:	b292      	uxth	r2, r2
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	3302      	adds	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	e008      	b.n	80038d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	b292      	uxth	r2, r2
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3301      	adds	r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1c8      	bne.n	8003882 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 ff38 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e005      	b.n	800391c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	e000      	b.n	800391c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800391a:	2302      	movs	r3, #2
  }
}
 800391c:	4618      	mov	r0, r3
 800391e:	3720      	adds	r7, #32
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003938:	2b20      	cmp	r3, #32
 800393a:	d137      	bne.n	80039ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Receive_IT+0x24>
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e030      	b.n	80039ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_UART_Receive_IT+0x94>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01f      	beq.n	800399c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d018      	beq.n	800399c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	e853 3f00 	ldrex	r3, [r3]
 8003976:	613b      	str	r3, [r7, #16]
   return(result);
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	461a      	mov	r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	623b      	str	r3, [r7, #32]
 800398a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	69f9      	ldr	r1, [r7, #28]
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	61bb      	str	r3, [r7, #24]
   return(result);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e6      	bne.n	800396a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	461a      	mov	r2, r3
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 ff4c 	bl	8004840 <UART_Start_Receive_IT>
 80039a8:	4603      	mov	r3, r0
 80039aa:	e000      	b.n	80039ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3728      	adds	r7, #40	; 0x28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40008000 	.word	0x40008000

080039bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b0ba      	sub	sp, #232	; 0xe8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80039e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80039ea:	4013      	ands	r3, r2
 80039ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80039f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d115      	bne.n	8003a24 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fc:	f003 0320 	and.w	r3, r3, #32
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00f      	beq.n	8003a24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a08:	f003 0320 	and.w	r3, r3, #32
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 82ae 	beq.w	8003f76 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
      }
      return;
 8003a22:	e2a8      	b.n	8003f76 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003a24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8117 	beq.w	8003c5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003a3e:	4b85      	ldr	r3, [pc, #532]	; (8003c54 <HAL_UART_IRQHandler+0x298>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 810a 	beq.w	8003c5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d011      	beq.n	8003a78 <HAL_UART_IRQHandler+0xbc>
 8003a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00b      	beq.n	8003a78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d011      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xec>
 8003a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2202      	movs	r2, #2
 8003a96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d011      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x11c>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	f043 0202 	orr.w	r2, r3, #2
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ae8:	f003 0320 	and.w	r3, r3, #32
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2208      	movs	r2, #8
 8003b02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0a:	f043 0208 	orr.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18a>
 8003b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	f043 0220 	orr.w	r2, r3, #32
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8214 	beq.w	8003f7a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00d      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d005      	beq.n	8003b9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d04f      	beq.n	8003c3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 ff14 	bl	80049cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bae:	2b40      	cmp	r3, #64	; 0x40
 8003bb0:	d141      	bne.n	8003c36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1d9      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_UART_IRQHandler+0x29c>)
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe f9e1 	bl	8001fda <HAL_DMA_Abort_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d017      	beq.n	8003c4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c2c:	e00f      	b.n	8003c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f9b8 	bl	8003fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00b      	b.n	8003c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9b4 	bl	8003fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e007      	b.n	8003c4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9b0 	bl	8003fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003c4c:	e195      	b.n	8003f7a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4e:	bf00      	nop
    return;
 8003c50:	e193      	b.n	8003f7a <HAL_UART_IRQHandler+0x5be>
 8003c52:	bf00      	nop
 8003c54:	04000120 	.word	0x04000120
 8003c58:	08004a95 	.word	0x08004a95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	f040 814e 	bne.w	8003f02 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8147 	beq.w	8003f02 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8140 	beq.w	8003f02 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2210      	movs	r2, #16
 8003c88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	f040 80b8 	bne.w	8003e0a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8167 	beq.w	8003f7e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	f080 815f 	bcs.w	8003f7e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0320 	and.w	r3, r3, #32
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f040 8086 	bne.w	8003de8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1da      	bne.n	8003cdc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3308      	adds	r3, #8
 8003d2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d30:	e853 3f00 	ldrex	r3, [r3]
 8003d34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e1      	bne.n	8003d26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3308      	adds	r3, #8
 8003d82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db8:	f023 0310 	bic.w	r3, r3, #16
 8003dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dca:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e4      	bne.n	8003da8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe f8bb 	bl	8001f5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8d8 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e08:	e0b9      	b.n	8003f7e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 80ab 	beq.w	8003f82 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a6 	beq.w	8003f82 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e58:	647b      	str	r3, [r7, #68]	; 0x44
 8003e5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e4      	bne.n	8003e36 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e90:	633a      	str	r2, [r7, #48]	; 0x30
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e3      	bne.n	8003e6c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 0310 	bic.w	r3, r3, #16
 8003ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e4      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f85c 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f00:	e03f      	b.n	8003f82 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00e      	beq.n	8003f2c <HAL_UART_IRQHandler+0x570>
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003f22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 ffb1 	bl	8004e8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f2a:	e02d      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01c      	beq.n	8003f86 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4798      	blx	r3
    }
    return;
 8003f54:	e017      	b.n	8003f86 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d012      	beq.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fda6 	bl	8004ac0 <UART_EndTransmit_IT>
    return;
 8003f74:	e008      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f76:	bf00      	nop
 8003f78:	e006      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f7a:	bf00      	nop
 8003f7c:	e004      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003f86:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003f88:	37e8      	adds	r7, #232	; 0xe8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop

08003f90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fd4:	b08a      	sub	sp, #40	; 0x28
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	4ba5      	ldr	r3, [pc, #660]	; (8004294 <UART_SetConfig+0x2c4>)
 8004000:	4013      	ands	r3, r2
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004008:	430b      	orrs	r3, r1
 800400a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a9a      	ldr	r2, [pc, #616]	; (8004298 <UART_SetConfig+0x2c8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	4313      	orrs	r3, r2
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	430a      	orrs	r2, r1
 800404e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a91      	ldr	r2, [pc, #580]	; (800429c <UART_SetConfig+0x2cc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d126      	bne.n	80040a8 <UART_SetConfig+0xd8>
 800405a:	4b91      	ldr	r3, [pc, #580]	; (80042a0 <UART_SetConfig+0x2d0>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	2b03      	cmp	r3, #3
 8004066:	d81b      	bhi.n	80040a0 <UART_SetConfig+0xd0>
 8004068:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0xa0>)
 800406a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406e:	bf00      	nop
 8004070:	08004081 	.word	0x08004081
 8004074:	08004091 	.word	0x08004091
 8004078:	08004089 	.word	0x08004089
 800407c:	08004099 	.word	0x08004099
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004086:	e0d6      	b.n	8004236 <UART_SetConfig+0x266>
 8004088:	2302      	movs	r3, #2
 800408a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408e:	e0d2      	b.n	8004236 <UART_SetConfig+0x266>
 8004090:	2304      	movs	r3, #4
 8004092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004096:	e0ce      	b.n	8004236 <UART_SetConfig+0x266>
 8004098:	2308      	movs	r3, #8
 800409a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409e:	e0ca      	b.n	8004236 <UART_SetConfig+0x266>
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a6:	e0c6      	b.n	8004236 <UART_SetConfig+0x266>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a7d      	ldr	r2, [pc, #500]	; (80042a4 <UART_SetConfig+0x2d4>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d138      	bne.n	8004124 <UART_SetConfig+0x154>
 80040b2:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <UART_SetConfig+0x2d0>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	d82d      	bhi.n	800411c <UART_SetConfig+0x14c>
 80040c0:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <UART_SetConfig+0xf8>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	0800411d 	.word	0x0800411d
 80040d0:	0800411d 	.word	0x0800411d
 80040d4:	0800411d 	.word	0x0800411d
 80040d8:	0800410d 	.word	0x0800410d
 80040dc:	0800411d 	.word	0x0800411d
 80040e0:	0800411d 	.word	0x0800411d
 80040e4:	0800411d 	.word	0x0800411d
 80040e8:	08004105 	.word	0x08004105
 80040ec:	0800411d 	.word	0x0800411d
 80040f0:	0800411d 	.word	0x0800411d
 80040f4:	0800411d 	.word	0x0800411d
 80040f8:	08004115 	.word	0x08004115
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	e098      	b.n	8004236 <UART_SetConfig+0x266>
 8004104:	2302      	movs	r3, #2
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410a:	e094      	b.n	8004236 <UART_SetConfig+0x266>
 800410c:	2304      	movs	r3, #4
 800410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004112:	e090      	b.n	8004236 <UART_SetConfig+0x266>
 8004114:	2308      	movs	r3, #8
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e08c      	b.n	8004236 <UART_SetConfig+0x266>
 800411c:	2310      	movs	r3, #16
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e088      	b.n	8004236 <UART_SetConfig+0x266>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a5f      	ldr	r2, [pc, #380]	; (80042a8 <UART_SetConfig+0x2d8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d125      	bne.n	800417a <UART_SetConfig+0x1aa>
 800412e:	4b5c      	ldr	r3, [pc, #368]	; (80042a0 <UART_SetConfig+0x2d0>)
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004138:	2b30      	cmp	r3, #48	; 0x30
 800413a:	d016      	beq.n	800416a <UART_SetConfig+0x19a>
 800413c:	2b30      	cmp	r3, #48	; 0x30
 800413e:	d818      	bhi.n	8004172 <UART_SetConfig+0x1a2>
 8004140:	2b20      	cmp	r3, #32
 8004142:	d00a      	beq.n	800415a <UART_SetConfig+0x18a>
 8004144:	2b20      	cmp	r3, #32
 8004146:	d814      	bhi.n	8004172 <UART_SetConfig+0x1a2>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <UART_SetConfig+0x182>
 800414c:	2b10      	cmp	r3, #16
 800414e:	d008      	beq.n	8004162 <UART_SetConfig+0x192>
 8004150:	e00f      	b.n	8004172 <UART_SetConfig+0x1a2>
 8004152:	2300      	movs	r3, #0
 8004154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004158:	e06d      	b.n	8004236 <UART_SetConfig+0x266>
 800415a:	2302      	movs	r3, #2
 800415c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004160:	e069      	b.n	8004236 <UART_SetConfig+0x266>
 8004162:	2304      	movs	r3, #4
 8004164:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004168:	e065      	b.n	8004236 <UART_SetConfig+0x266>
 800416a:	2308      	movs	r3, #8
 800416c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004170:	e061      	b.n	8004236 <UART_SetConfig+0x266>
 8004172:	2310      	movs	r3, #16
 8004174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004178:	e05d      	b.n	8004236 <UART_SetConfig+0x266>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a4b      	ldr	r2, [pc, #300]	; (80042ac <UART_SetConfig+0x2dc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d125      	bne.n	80041d0 <UART_SetConfig+0x200>
 8004184:	4b46      	ldr	r3, [pc, #280]	; (80042a0 <UART_SetConfig+0x2d0>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800418e:	2bc0      	cmp	r3, #192	; 0xc0
 8004190:	d016      	beq.n	80041c0 <UART_SetConfig+0x1f0>
 8004192:	2bc0      	cmp	r3, #192	; 0xc0
 8004194:	d818      	bhi.n	80041c8 <UART_SetConfig+0x1f8>
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d00a      	beq.n	80041b0 <UART_SetConfig+0x1e0>
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d814      	bhi.n	80041c8 <UART_SetConfig+0x1f8>
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <UART_SetConfig+0x1d8>
 80041a2:	2b40      	cmp	r3, #64	; 0x40
 80041a4:	d008      	beq.n	80041b8 <UART_SetConfig+0x1e8>
 80041a6:	e00f      	b.n	80041c8 <UART_SetConfig+0x1f8>
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e042      	b.n	8004236 <UART_SetConfig+0x266>
 80041b0:	2302      	movs	r3, #2
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e03e      	b.n	8004236 <UART_SetConfig+0x266>
 80041b8:	2304      	movs	r3, #4
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e03a      	b.n	8004236 <UART_SetConfig+0x266>
 80041c0:	2308      	movs	r3, #8
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e036      	b.n	8004236 <UART_SetConfig+0x266>
 80041c8:	2310      	movs	r3, #16
 80041ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ce:	e032      	b.n	8004236 <UART_SetConfig+0x266>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a30      	ldr	r2, [pc, #192]	; (8004298 <UART_SetConfig+0x2c8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d12a      	bne.n	8004230 <UART_SetConfig+0x260>
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <UART_SetConfig+0x2d0>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e8:	d01a      	beq.n	8004220 <UART_SetConfig+0x250>
 80041ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ee:	d81b      	bhi.n	8004228 <UART_SetConfig+0x258>
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d00c      	beq.n	8004210 <UART_SetConfig+0x240>
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fa:	d815      	bhi.n	8004228 <UART_SetConfig+0x258>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <UART_SetConfig+0x238>
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d008      	beq.n	8004218 <UART_SetConfig+0x248>
 8004206:	e00f      	b.n	8004228 <UART_SetConfig+0x258>
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e012      	b.n	8004236 <UART_SetConfig+0x266>
 8004210:	2302      	movs	r3, #2
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e00e      	b.n	8004236 <UART_SetConfig+0x266>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800421e:	e00a      	b.n	8004236 <UART_SetConfig+0x266>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004226:	e006      	b.n	8004236 <UART_SetConfig+0x266>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422e:	e002      	b.n	8004236 <UART_SetConfig+0x266>
 8004230:	2310      	movs	r3, #16
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <UART_SetConfig+0x2c8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	f040 808b 	bne.w	8004358 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004246:	2b08      	cmp	r3, #8
 8004248:	d834      	bhi.n	80042b4 <UART_SetConfig+0x2e4>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <UART_SetConfig+0x280>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004275 	.word	0x08004275
 8004254:	080042b5 	.word	0x080042b5
 8004258:	0800427d 	.word	0x0800427d
 800425c:	080042b5 	.word	0x080042b5
 8004260:	08004283 	.word	0x08004283
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080042b5 	.word	0x080042b5
 800426c:	080042b5 	.word	0x080042b5
 8004270:	0800428b 	.word	0x0800428b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004274:	f7fe fe94 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8004278:	61f8      	str	r0, [r7, #28]
        break;
 800427a:	e021      	b.n	80042c0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <UART_SetConfig+0x2e0>)
 800427e:	61fb      	str	r3, [r7, #28]
        break;
 8004280:	e01e      	b.n	80042c0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004282:	f7fe fdf5 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 8004286:	61f8      	str	r0, [r7, #28]
        break;
 8004288:	e01a      	b.n	80042c0 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800428a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428e:	61fb      	str	r3, [r7, #28]
        break;
 8004290:	e016      	b.n	80042c0 <UART_SetConfig+0x2f0>
 8004292:	bf00      	nop
 8004294:	efff69f3 	.word	0xefff69f3
 8004298:	40008000 	.word	0x40008000
 800429c:	40013800 	.word	0x40013800
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40004400 	.word	0x40004400
 80042a8:	40004800 	.word	0x40004800
 80042ac:	40004c00 	.word	0x40004c00
 80042b0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80fa 	beq.w	80044bc <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d305      	bcc.n	80042e4 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d903      	bls.n	80042ec <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042ea:	e0e7      	b.n	80044bc <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2200      	movs	r2, #0
 80042f0:	461c      	mov	r4, r3
 80042f2:	4615      	mov	r5, r2
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	022b      	lsls	r3, r5, #8
 80042fe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004302:	0222      	lsls	r2, r4, #8
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	6849      	ldr	r1, [r1, #4]
 8004308:	0849      	lsrs	r1, r1, #1
 800430a:	2000      	movs	r0, #0
 800430c:	4688      	mov	r8, r1
 800430e:	4681      	mov	r9, r0
 8004310:	eb12 0a08 	adds.w	sl, r2, r8
 8004314:	eb43 0b09 	adc.w	fp, r3, r9
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	607a      	str	r2, [r7, #4]
 8004322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004326:	4650      	mov	r0, sl
 8004328:	4659      	mov	r1, fp
 800432a:	f7fb ff53 	bl	80001d4 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4613      	mov	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433c:	d308      	bcc.n	8004350 <UART_SetConfig+0x380>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004344:	d204      	bcs.n	8004350 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	60da      	str	r2, [r3, #12]
 800434e:	e0b5      	b.n	80044bc <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004356:	e0b1      	b.n	80044bc <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004360:	d15d      	bne.n	800441e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004366:	2b08      	cmp	r3, #8
 8004368:	d827      	bhi.n	80043ba <UART_SetConfig+0x3ea>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x3a0>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004395 	.word	0x08004395
 8004374:	0800439d 	.word	0x0800439d
 8004378:	080043a5 	.word	0x080043a5
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043ab 	.word	0x080043ab
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043bb 	.word	0x080043bb
 800438c:	080043bb 	.word	0x080043bb
 8004390:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004394:	f7fe fe04 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8004398:	61f8      	str	r0, [r7, #28]
        break;
 800439a:	e014      	b.n	80043c6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800439c:	f7fe fe16 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 80043a0:	61f8      	str	r0, [r7, #28]
        break;
 80043a2:	e010      	b.n	80043c6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <UART_SetConfig+0x508>)
 80043a6:	61fb      	str	r3, [r7, #28]
        break;
 80043a8:	e00d      	b.n	80043c6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7fe fd61 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 80043ae:	61f8      	str	r0, [r7, #28]
        break;
 80043b0:	e009      	b.n	80043c6 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	61fb      	str	r3, [r7, #28]
        break;
 80043b8:	e005      	b.n	80043c6 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d077      	beq.n	80044bc <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	005a      	lsls	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	441a      	add	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b0f      	cmp	r3, #15
 80043e6:	d916      	bls.n	8004416 <UART_SetConfig+0x446>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ee:	d212      	bcs.n	8004416 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f023 030f 	bic.w	r3, r3, #15
 80043f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	b29b      	uxth	r3, r3
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	b29a      	uxth	r2, r3
 8004406:	8afb      	ldrh	r3, [r7, #22]
 8004408:	4313      	orrs	r3, r2
 800440a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	8afa      	ldrh	r2, [r7, #22]
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e052      	b.n	80044bc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800441c:	e04e      	b.n	80044bc <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004422:	2b08      	cmp	r3, #8
 8004424:	d827      	bhi.n	8004476 <UART_SetConfig+0x4a6>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x45c>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004451 	.word	0x08004451
 8004430:	08004459 	.word	0x08004459
 8004434:	08004461 	.word	0x08004461
 8004438:	08004477 	.word	0x08004477
 800443c:	08004467 	.word	0x08004467
 8004440:	08004477 	.word	0x08004477
 8004444:	08004477 	.word	0x08004477
 8004448:	08004477 	.word	0x08004477
 800444c:	0800446f 	.word	0x0800446f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fda6 	bl	8002fa0 <HAL_RCC_GetPCLK1Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e014      	b.n	8004482 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7fe fdb8 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 800445c:	61f8      	str	r0, [r7, #28]
        break;
 800445e:	e010      	b.n	8004482 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <UART_SetConfig+0x508>)
 8004462:	61fb      	str	r3, [r7, #28]
        break;
 8004464:	e00d      	b.n	8004482 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7fe fd03 	bl	8002e70 <HAL_RCC_GetSysClockFreq>
 800446a:	61f8      	str	r0, [r7, #28]
        break;
 800446c:	e009      	b.n	8004482 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	61fb      	str	r3, [r7, #28]
        break;
 8004474:	e005      	b.n	8004482 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004480:	bf00      	nop
    }

    if (pclk != 0U)
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d019      	beq.n	80044bc <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	085a      	lsrs	r2, r3, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	441a      	add	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b0f      	cmp	r3, #15
 80044a0:	d909      	bls.n	80044b6 <UART_SetConfig+0x4e6>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d205      	bcs.n	80044b6 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	e002      	b.n	80044bc <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3728      	adds	r7, #40	; 0x28
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	00f42400 	.word	0x00f42400

080044dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d10a      	bne.n	80045f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b098      	sub	sp, #96	; 0x60
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004630:	f7fc fd28 	bl	8001084 <HAL_GetTick>
 8004634:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d12e      	bne.n	80046a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f88c 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d021      	beq.n	80046a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004672:	653b      	str	r3, [r7, #80]	; 0x50
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800467c:	647b      	str	r3, [r7, #68]	; 0x44
 800467e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800468a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e062      	b.n	8004768 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d149      	bne.n	8004744 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f856 	bl	8004770 <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d03c      	beq.n	8004744 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	623b      	str	r3, [r7, #32]
   return(result);
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e6      	bne.n	80046ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3308      	adds	r3, #8
 8004702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	60fb      	str	r3, [r7, #12]
   return(result);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	64bb      	str	r3, [r7, #72]	; 0x48
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471c:	61fa      	str	r2, [r7, #28]
 800471e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	617b      	str	r3, [r7, #20]
   return(result);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e5      	bne.n	80046fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e011      	b.n	8004768 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2220      	movs	r2, #32
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3758      	adds	r7, #88	; 0x58
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004780:	e049      	b.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004788:	d045      	beq.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fc fc7b 	bl	8001084 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e048      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d031      	beq.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d110      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2208      	movs	r2, #8
 80047c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f8ff 	bl	80049cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2208      	movs	r2, #8
 80047d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e029      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047f0:	d111      	bne.n	8004816 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f8e5 	bl	80049cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e00f      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4013      	ands	r3, r2
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	bf0c      	ite	eq
 8004826:	2301      	moveq	r3, #1
 8004828:	2300      	movne	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	79fb      	ldrb	r3, [r7, #7]
 8004830:	429a      	cmp	r2, r3
 8004832:	d0a6      	beq.n	8004782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004840:	b480      	push	{r7}
 8004842:	b097      	sub	sp, #92	; 0x5c
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	88fa      	ldrh	r2, [r7, #6]
 8004858:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	88fa      	ldrh	r2, [r7, #6]
 8004860:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004872:	d10e      	bne.n	8004892 <UART_Start_Receive_IT+0x52>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <UART_Start_Receive_IT+0x48>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004882:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004886:	e02d      	b.n	80048e4 <UART_Start_Receive_IT+0xa4>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004890:	e028      	b.n	80048e4 <UART_Start_Receive_IT+0xa4>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10d      	bne.n	80048b6 <UART_Start_Receive_IT+0x76>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <UART_Start_Receive_IT+0x6c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	22ff      	movs	r2, #255	; 0xff
 80048a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048aa:	e01b      	b.n	80048e4 <UART_Start_Receive_IT+0xa4>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	227f      	movs	r2, #127	; 0x7f
 80048b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048b4:	e016      	b.n	80048e4 <UART_Start_Receive_IT+0xa4>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	d10d      	bne.n	80048dc <UART_Start_Receive_IT+0x9c>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <UART_Start_Receive_IT+0x92>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	227f      	movs	r2, #127	; 0x7f
 80048cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d0:	e008      	b.n	80048e4 <UART_Start_Receive_IT+0xa4>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	223f      	movs	r2, #63	; 0x3f
 80048d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048da:	e003      	b.n	80048e4 <UART_Start_Receive_IT+0xa4>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2222      	movs	r2, #34	; 0x22
 80048f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	657b      	str	r3, [r7, #84]	; 0x54
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3308      	adds	r3, #8
 8004912:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004914:	64ba      	str	r2, [r7, #72]	; 0x48
 8004916:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800491a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d107      	bne.n	8004942 <UART_Start_Receive_IT+0x102>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a21      	ldr	r2, [pc, #132]	; (80049c4 <UART_Start_Receive_IT+0x184>)
 800493e:	669a      	str	r2, [r3, #104]	; 0x68
 8004940:	e002      	b.n	8004948 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <UART_Start_Receive_IT+0x188>)
 8004946:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d019      	beq.n	8004984 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e6      	bne.n	8004950 <UART_Start_Receive_IT+0x110>
 8004982:	e018      	b.n	80049b6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	613b      	str	r3, [r7, #16]
   return(result);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f043 0320 	orr.w	r3, r3, #32
 8004998:	653b      	str	r3, [r7, #80]	; 0x50
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a2:	623b      	str	r3, [r7, #32]
 80049a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a6:	69f9      	ldr	r1, [r7, #28]
 80049a8:	6a3a      	ldr	r2, [r7, #32]
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1e6      	bne.n	8004984 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	375c      	adds	r7, #92	; 0x5c
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	08004cd1 	.word	0x08004cd1
 80049c8:	08004b15 	.word	0x08004b15

080049cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b095      	sub	sp, #84	; 0x54
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	461a      	mov	r2, r3
 80049f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f2:	643b      	str	r3, [r7, #64]	; 0x40
 80049f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1e6      	bne.n	80049d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	3308      	adds	r3, #8
 8004a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3308      	adds	r3, #8
 8004a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e5      	bne.n	8004a06 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d118      	bne.n	8004a74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f023 0310 	bic.w	r3, r3, #16
 8004a56:	647b      	str	r3, [r7, #68]	; 0x44
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a64:	6979      	ldr	r1, [r7, #20]
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	e841 2300 	strex	r3, r2, [r1]
 8004a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1e6      	bne.n	8004a42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004a88:	bf00      	nop
 8004a8a:	3754      	adds	r7, #84	; 0x54
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f7ff fa76 	bl	8003fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6979      	ldr	r1, [r7, #20]
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	613b      	str	r3, [r7, #16]
   return(result);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fa42 	bl	8003f90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0c:	bf00      	nop
 8004b0e:	3720      	adds	r7, #32
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b09c      	sub	sp, #112	; 0x70
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2c:	2b22      	cmp	r3, #34	; 0x22
 8004b2e:	f040 80be 	bne.w	8004cae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004b40:	b2d9      	uxtb	r1, r3
 8004b42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	400a      	ands	r2, r1
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 80a3 	bne.w	8004cc2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b84:	e853 3f00 	ldrex	r3, [r3]
 8004b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e6      	bne.n	8004b7c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bce:	647a      	str	r2, [r7, #68]	; 0x44
 8004bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e5      	bne.n	8004bae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a34      	ldr	r2, [pc, #208]	; (8004ccc <UART_RxISR_8BIT+0x1b8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d01f      	beq.n	8004c40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c22:	663b      	str	r3, [r7, #96]	; 0x60
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e6      	bne.n	8004c0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d12e      	bne.n	8004ca6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	e853 3f00 	ldrex	r3, [r3]
 8004c5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0310 	bic.w	r3, r3, #16
 8004c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	617b      	str	r3, [r7, #20]
   return(result);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e6      	bne.n	8004c4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b10      	cmp	r3, #16
 8004c8c:	d103      	bne.n	8004c96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2210      	movs	r2, #16
 8004c94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff f98a 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ca4:	e00d      	b.n	8004cc2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fb ff4c 	bl	8000b44 <HAL_UART_RxCpltCallback>
}
 8004cac:	e009      	b.n	8004cc2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	8b1b      	ldrh	r3, [r3, #24]
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0208 	orr.w	r2, r2, #8
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	831a      	strh	r2, [r3, #24]
}
 8004cc2:	bf00      	nop
 8004cc4:	3770      	adds	r7, #112	; 0x70
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40008000 	.word	0x40008000

08004cd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b09c      	sub	sp, #112	; 0x70
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ce8:	2b22      	cmp	r3, #34	; 0x22
 8004cea:	f040 80be 	bne.w	8004e6a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004cf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cfe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d06:	4013      	ands	r3, r2
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	1c9a      	adds	r2, r3, #2
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f040 80a3 	bne.w	8004e7e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d4c:	667b      	str	r3, [r7, #100]	; 0x64
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d56:	657b      	str	r3, [r7, #84]	; 0x54
 8004d58:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e6      	bne.n	8004d38 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	f023 0301 	bic.w	r3, r3, #1
 8004d80:	663b      	str	r3, [r7, #96]	; 0x60
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d8a:	643a      	str	r2, [r7, #64]	; 0x40
 8004d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e5      	bne.n	8004d6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <UART_RxISR_16BIT+0x1b8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d01f      	beq.n	8004dfc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d018      	beq.n	8004dfc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d12e      	bne.n	8004e62 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f023 0310 	bic.w	r3, r3, #16
 8004e1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	613b      	str	r3, [r7, #16]
   return(result);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e6      	bne.n	8004e0a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d103      	bne.n	8004e52 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2210      	movs	r2, #16
 8004e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7ff f8ac 	bl	8003fb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e60:	e00d      	b.n	8004e7e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fb fe6e 	bl	8000b44 <HAL_UART_RxCpltCallback>
}
 8004e68:	e009      	b.n	8004e7e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	8b1b      	ldrh	r3, [r3, #24]
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0208 	orr.w	r2, r2, #8
 8004e7a:	b292      	uxth	r2, r2
 8004e7c:	831a      	strh	r2, [r3, #24]
}
 8004e7e:	bf00      	nop
 8004e80:	3770      	adds	r7, #112	; 0x70
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40008000 	.word	0x40008000

08004e8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <memset>:
 8004ea0:	4402      	add	r2, r0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <memset+0xa>
 8004ea8:	4770      	bx	lr
 8004eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004eae:	e7f9      	b.n	8004ea4 <memset+0x4>

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	4d0d      	ldr	r5, [pc, #52]	; (8004ee8 <__libc_init_array+0x38>)
 8004eb4:	4c0d      	ldr	r4, [pc, #52]	; (8004eec <__libc_init_array+0x3c>)
 8004eb6:	1b64      	subs	r4, r4, r5
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	2600      	movs	r6, #0
 8004ebc:	42a6      	cmp	r6, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	4d0b      	ldr	r5, [pc, #44]	; (8004ef0 <__libc_init_array+0x40>)
 8004ec2:	4c0c      	ldr	r4, [pc, #48]	; (8004ef4 <__libc_init_array+0x44>)
 8004ec4:	f000 f826 	bl	8004f14 <_init>
 8004ec8:	1b64      	subs	r4, r4, r5
 8004eca:	10a4      	asrs	r4, r4, #2
 8004ecc:	2600      	movs	r6, #0
 8004ece:	42a6      	cmp	r6, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed8:	4798      	blx	r3
 8004eda:	3601      	adds	r6, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee2:	4798      	blx	r3
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08004f7c 	.word	0x08004f7c
 8004eec:	08004f7c 	.word	0x08004f7c
 8004ef0:	08004f7c 	.word	0x08004f7c
 8004ef4:	08004f80 	.word	0x08004f80

08004ef8 <memcpy>:
 8004ef8:	440a      	add	r2, r1
 8004efa:	4291      	cmp	r1, r2
 8004efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f00:	d100      	bne.n	8004f04 <memcpy+0xc>
 8004f02:	4770      	bx	lr
 8004f04:	b510      	push	{r4, lr}
 8004f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0e:	4291      	cmp	r1, r2
 8004f10:	d1f9      	bne.n	8004f06 <memcpy+0xe>
 8004f12:	bd10      	pop	{r4, pc}

08004f14 <_init>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr

08004f20 <_fini>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr
